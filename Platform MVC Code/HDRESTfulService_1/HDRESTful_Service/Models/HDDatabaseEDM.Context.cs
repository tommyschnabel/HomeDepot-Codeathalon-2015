//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HDRESTful_Service.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HDDatabaseEntitiesAzure : DbContext
    {
        public HDDatabaseEntitiesAzure()
            : base("name=HDDatabaseEntitiesAzure")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Types> Types { get; set; }
        public virtual DbSet<Items> Items { get; set; }
    
        public virtual ObjectResult<BuildBestFitItem> BuildBestFitItem(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuildBestFitItem>("BuildBestFitItem", itemIDParameter);
        }
    
        public virtual ObjectResult<BuildViewItem> BuildViewItem(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuildViewItem>("BuildViewItem", itemIDParameter);
        }
    
        public virtual ObjectResult<FindItemInformation_Result> FindItemInformation(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindItemInformation_Result>("FindItemInformation", itemIDParameter);
        }
    
        public virtual ObjectResult<FindTypeInformation_Result> FindTypeInformation(Nullable<int> typeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindTypeInformation_Result>("FindTypeInformation", typeIDParameter);
        }
    }
}
